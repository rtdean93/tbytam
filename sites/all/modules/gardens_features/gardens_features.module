<?php
// $Id$

/**
 * @file
 * Small improvements designed to enhance the default features used in Drupal Gardens.
 */

/**
 * Implements hook_modules_installed().
 */
function gardens_features_modules_installed($modules) {
  // Add the 'access news feeds' permission by default.
  if (in_array('aggregator', $modules)) {
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access news feeds'));
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access news feeds'));
  }
  // Add the 'save draft' permission by default.
  if (in_array('save_draft', $modules)) {
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('save draft'));
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('save draft'));
  }
  if (in_array('extlink', $modules)) {
    // We added the extlink module because we have a number of users clamoring for the
    // ability to have external links automatically open in a new tab or window. But by
    // default this setting is off. Override extlink, and turn it on by "default" when
    // the module is first installed.
    variable_set('extlink_target', '_blank');
    // Set regex patterns to exclude domains and subdomains at acquia-sites.com
    // and drupalgardens.com, otherwise contextual help links (links to gardener)
    // appear with external link icons throughout site.
    variable_set('extlink_exclude', '(acquia-sites.com|drupalgardens.com)');
  }
}

/**
 * Implements hook_menu()
 */
function gardens_features_menu() {
  $items['admin/content/media/embed/providers'] = array(
    'title' => 'Embed.ly providers',
    'page callback' => 'gardens_features_embedly_providers',
    'access arguments' => array('administer media'),
    'theme callback' => 'media_dialog_get_theme_name',
  );

  return $items;
}

/**
 * Implements hook_system_info_alter().
 */
function gardens_features_system_info_alter(&$info, $file, $type) {
  // In Gardens we want to tweak the names and descriptions of several modules.
  if ($file->name == 'webform_alt_ui') {
    $info['name'] = 'Webforms';
    $info['description'] = 'Allows you to design custom forms and questionnaires to collect feedback or surveys and manage the results.';
  }
  if ($file->name == 'views') {
    $info['description'] = 'Allows you to create custom displays or mashups of content, media, users, and more.';
    // The Views module implements hook_permission() but Views UI provides the
    // administrative interface that allows you to configure views. So to get
    // both the "Permissions" and "Configure" links to appear on the modules
    // page, we hide Views UI and have it be automatically enabled whenever
    // Views is (see gardens_features_simplified_modules_hidden_dependencies())
    // and then alter Views here so that it displays Views UI's configuration
    // link.
    $info['configure'] = 'admin/structure/views';
  }
}

/**
 * Implements hook_init().
 */
function gardens_features_init() {
  drupal_add_library('system', 'jquery.cookie');

  // Add CSS
  $path = drupal_get_path('module', 'gardens_features');
  drupal_add_css($path . '/gardens_features.css', array('preprocess' => TRUE));
  drupal_add_css($path . '/css/ie/gardens_features.lte-ie-8.css', array('group' => CSS_THEME, 'browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE)));

  // A bit ugly: We want to control the appearance of jQuery UI dialogs across
  // Gardens (but not for Seven and its subthemes, which have their own jQuery UI theme).
  drupal_theme_initialize();
  if ($GLOBALS['theme_info']->info != 'seven' && (!isset($GLOBALS['theme_info']->base_theme) || $GLOBALS['theme_info']->base_theme != 'seven')) {
    drupal_add_css(drupal_get_path('module', 'gardens_features') . '/gardens_features.jquery.ui.theme.css');
  }
}

/**
 * Implements hook_theme().
 */
function gardens_features_theme() {
  return array(
    'gardens_features_styles_markup_compatibility' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_help().
 */
function gardens_features_help($path, $arg) {
  if ($path == 'admin/config/search/xmlsitemap') {
    return '<p>' . t("View and configure your site's active XML sitemap.") . '</p>';
  }
}

/**
 * Implements MODULE_preprocess_page().
 */
function gardens_features_preprocess_page(&$variables) {
  if (gardens_features_hide_front_page_title()) {
    $variables['title'] = '';
  }
}

/**
 * Implements MODULE_preprocess_html().
 */
function gardens_features_preprocess_html(&$variables) {
  $path = drupal_get_path('module', 'gardens_features');
  // Add custom JS
  drupal_add_js($path . '/gardens_features.js', array('weight' => '500'));
  if (gardens_features_hide_front_page_title()) {
    // Fall back on the standard front page title.
    $head_title = array(check_plain(variable_get('site_name', 'Drupal')));
    if (variable_get('site_slogan', '')) {
      $head_title[] = filter_xss_admin(variable_get('site_slogan', ''));
    }
    $variables['head_title'] = implode(' | ', $head_title);
  }
}

/**
 * If using the product template, page nodes on the front page (e.g., the
 * product description node) should not display a title.
 *
 * @return
 *   TRUE if the above is the case, FALSE otherwise.
 */
function gardens_features_hide_front_page_title() {
  return drupal_is_front_page() && (variable_get('site_template_current_template', '') == 'product') && ($node = menu_get_object()) && isset($node->nid) && isset($node->type) && $node->type == 'page';
}

/**
 * Implements hook_menu_alter().
 */
function gardens_features_menu_alter(&$items) {
  // Restrict users to the one sitemap we start them out with.
  if (isset($items['admin/config/search/xmlsitemap/add'])) {
    $items['admin/config/search/xmlsitemap/add']['access callback'] = FALSE;
  }
  if (isset($items['admin/config/search/xmlsitemap/delete/%xmlsitemap_sitemap'])) {
    $items['admin/config/search/xmlsitemap/delete/%xmlsitemap_sitemap']['access callback'] = FALSE;
  }

  // We don't want the rebuild link to be a tab, or show up in a menu tree (if,
  // for example, the Management menu block is displayed).
  if (isset($items['admin/config/search/xmlsitemap/rebuild'])) {
    $items['admin/config/search/xmlsitemap/rebuild']['type'] = MENU_VISIBLE_IN_BREADCRUMB;
  }

  // We don't want the engine settings to be a separate page.
  if (isset($items['admin/config/search/xmlsitemap/engines'])) {
    $items['admin/config/search/xmlsitemap/engines']['access callback'] = FALSE;
  }

  // Give the configuration page menu item a description that makes sense for
  // Gardens; this includes using the singular terminology ("XML sitemap")
  // since we only allow one sitemap per site.
  // @todo Revisit this once http://drupal.org/node/834754 is resolved, since
  //   we may decide that the wording the module ultimately uses will work well
  //   enough for us.
  if (isset($items['admin/config/search/xmlsitemap'])) {
    $items['admin/config/search/xmlsitemap']['description'] = "Configure your site's XML sitemap to help search engines index your important pages.";
  }

  // Distinguish Views and Simple Views.
  if (isset($items['admin/structure/simpleviews'])) {
    $items['admin/structure/simpleviews']['description'] = 'Create simple lists of content.';
  }
  if (isset($items['admin/structure/views'])) {
    $items['admin/structure/views']['description'] = 'Create custom displays or mashups of content, media, users, and more.';
  }

  // Update from Media beta4 to beta5 changed this configuration link from
  // "Media types" to "File types" to account for modules other than Media
  // wanting to define file types. More IA and UX thinking is needed around
  // this, but for now, revert to the earlier title.
  if (isset($items['admin/config/media/file-types'])) {
    $items['admin/config/media/file-types']['title'] = 'Media types';
  }
}

/**
 * Implements hook_form_alter().
 */
function gardens_features_form_alter(&$form, $form_state, $form_id) {
  // Hide the XML sitemap settings on a variety of forms.
  if (in_array($form_id, array('menu_edit_menu', 'menu_edit_item', 'node_type_form', 'taxonomy_form_vocabulary', 'taxonomy_form_term')) || !empty($form['#node_edit_form'])) {
    $form['xmlsitemap']['#access'] = FALSE;
  }
  // File and image fields provide a setting for the URI scheme (public,
  // private, etc.). If there's only one option and it's the default value,
  // there's no point in making it visible to the user. Note that there are
  // multiple forms that present field settings, including:
  // - field_ui_field_edit_form()
  // - field_ui_field_settings_form()
  if (!empty($form['field']['settings']['uri_scheme']['#options']) && count($form['field']['settings']['uri_scheme']['#options']) == 1 && isset($form['field']['settings']['uri_scheme']['#default_value']) && $form['field']['settings']['uri_scheme']['#default_value'] === key($form['field']['settings']['uri_scheme']['#options'])) {
    $form['field']['settings']['uri_scheme']['#access'] = FALSE;
  }

  // The Views UI has modal dialog buttons labeled "Apply" that dismiss the
  // modal dialog, but this is inconsistent with desktop UI guidelines, where
  // "Apply" is only used when applying changes without dismissing.
  // @see http://msdn.microsoft.com/en-us/library/aa974176.aspx#commitButtonLabels
  if (strpos($form_id, 'views_ui_') === 0 && isset($form['buttons']['submit'])) {
    if ($form['buttons']['submit']['#value'] === t('Apply')) {
      $form['buttons']['submit']['#value'] = t('OK');
    }
    if (isset($form['buttons']['submit']['#values']) && in_array(t('Apply'), $form['buttons']['submit']['#values'])) {
      $form['buttons']['submit']['#values'][] = t('OK');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gardens_features_form_xmlsitemap_sitemap_list_form_alter(&$form, &$form_state) {
  // Redirect edit links on the overview page to the settings page, since that
  // is a more useful page for people to be able to edit their sitemap details.
  // Also remove the delete links, since we deny access to their callback in
  // hook_menu_alter().
  if (!empty($form['sitemaps']['#options'])) {
    foreach ($form['sitemaps']['#options'] as &$option) {
      if (isset($option['operations']['data']['#links']['edit']['href'])) {
        $option['operations']['data']['#links']['edit']['href'] = 'admin/config/search/xmlsitemap/settings';
      }
      unset($option['operations']['data']['#links']['delete']);
      // There is no need to redirect them back to the listing page after they
      // have submitted the settings form.
      unset($option['operations']['data']['#links']['edit']['query']['destination']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gardens_features_form_xmlsitemap_settings_form_alter(&$form, &$form_state) {
  // Expose the base URL setting to allow Gardens sites with custom domains to
  // know (and change) the URL being used for their sitemap.
  $form['xmlsitemap_base_url'] = $form['advanced']['xmlsitemap_base_url'];
  $form['xmlsitemap_base_url']['#title'] = t('URL to generate links from');
  $form['xmlsitemap_base_url']['#description'] = t('All links within the sitemap are relative to this URL.');
  $form['xmlsitemap_base_url']['#weight'] = -5;
  unset($form['advanced']['xmlsitemap_base_url']);

  // Add a fieldset for the engine settings.
  $form['engines'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search engine settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 0,
  );
  // Now add the engine settings form to it. We have to undo the effects of
  // system_settings_form() here, which is ugly, but that's still better than
  // duplicating the form code.
  require_once drupal_get_path('module', 'xmlsitemap_engines') . '/xmlsitemap_engines.admin.inc';
  $engine_settings_form = xmlsitemap_engines_settings_form();
  unset($engine_settings_form['actions']);
  unset($engine_settings_form['#submit']);
  unset($engine_settings_form['#theme']);
  $form['engines'][] = $engine_settings_form;

  // Hide advanced settings that we don't want to expose.
  $form['advanced']['#access'] = FALSE;
  $form['xmlsitemap_prefetch_aliases']['#access'] = FALSE;
  $form['xmlsitemap_minimum_lifetime']['#access'] = FALSE;
  $form['xmlsitemap_xsl']['#access'] = FALSE;
  $form['engines'][0]['xmlsitemap_engines_minimum_lifetime']['#access'] = FALSE;
  $form['engines'][0]['xmlsitemap_engines_submit_updated']['#access'] = FALSE;
  $form['engines'][0]['xmlsitemap_engines_submit_explanation_text'] = array(
    '#prefix' => '<div class="form-item" style="padding-bottom: 0;"><div class="description">',
    '#suffix' => '</div></div>',
    '#markup' => t('The sitemap is submitted each time it changes (at most once per day).'),
  );

  // Add our CSS for the page.
  $form['#attached']['css'][] = drupal_get_path('module', 'gardens_features') . '/gardens_features.xmlsitemap.css';

  // Change the vertical tabs to actually allow things to be configured from
  // inside them.
  foreach (xmlsitemap_get_link_info() as $entity => $entity_info) {
    if (!empty($entity_info['bundles'])) {
      // Hide the default vertical tab content.
      $form[$entity]['summary']['#access'] = FALSE;
      // Add our replacement form elements.
      $form[$entity]['description'] = array(
        '#prefix' => '<div class="description">',
        '#suffix' => '</div>',
        '#markup' => t('Control whether each %bundle-label appears in your sitemap by default, and set its priority (which influences how search engines weight it relative to other pages on your site).', array('%bundle-label' => $entity_info['bundle label'])),
      );
      $form[$entity]['#tree'] = TRUE;
      $form[$entity]['configuration'] = array(
        '#prefix' => '<div class="xmlsitemap-bundle-configuration">',
        '#suffix' => '</div>',
      );
      foreach ($entity_info['bundles'] as $bundle => $bundle_info) {
        $settings = xmlsitemap_link_bundle_load($entity, $bundle);
        $form[$entity]['configuration'][$bundle]['title'] = array(
          '#prefix' => '<h3>',
          '#suffix' => '</h3>',
          '#markup' => check_plain($bundle_info['label']),
        );
        $form[$entity]['configuration'][$bundle]['status'] = array(
          '#type' => 'checkbox',
          '#title' => t('Include in sitemap'),
          '#default_value' => $settings['status'],
        );
        $form[$entity]['configuration'][$bundle]['priority'] = array(
          '#type' => 'select',
          '#title' => t('with priority'),
          '#options' => xmlsitemap_get_priority_options(),
          '#default_value' => $settings['priority'],
          '#states' => array(
            'visible' => array(
              ':input[name="' . $entity . '[configuration][' . $bundle . '][status]"]' => array('checked' => TRUE),
            ),
          ),
        );
      }
    }
  }

  // Our custom submit handler must run first, so that we can remove elements
  // before system_settings_form_submit() puts them in the {variable} table.
  $form['#submit'] = array_merge(array('gardens_features_xmlsitemap_settings_form_submit'), $form['#submit']);
}

/**
 * Custom submit handler for xmlsitemap_settings_form().
 */
function gardens_features_xmlsitemap_settings_form_submit($form, &$form_state) {
  // Do not save the active_tab variable. We need this to prevent the
  // xmlsitemap_form_submit_flag_regenerate() submit handler from trigger a
  // message even when nothing in the form has changed, but also, this variable
  // doesn't make sense to save in the database anyway, since it's just used by
  // vertical tabs.
  // TODO: This should be submitted as a patch to the module.
  unset($form_state['values']['xmlsitemap_settings__active_tab']);

  // Go through each entity from the vertical tabs and save its configuration.
  foreach (xmlsitemap_get_link_info() as $entity => $entity_info) {
    if (isset($form_state['values'][$entity]['configuration'])) {
      // Save the configuration.
      foreach ($form_state['values'][$entity]['configuration'] as $bundle => $settings) {
        $existing_settings = xmlsitemap_link_bundle_load($entity, $bundle);
        xmlsitemap_link_bundle_settings_save($entity, $bundle, $settings);
        if ($settings != array_intersect_key($existing_settings, $settings)) {
          // Ugly hack to force the "xmlsitemap_regenerate_needed" variable to
          // change from off to on, thereby triggering an appropriate message
          // in the xmlsitemap_form_submit_flag_regenerate() submit handler.
          // The actual saving of this variable will then be done by
          // system_settings_form_submit()... yikes.
          variable_set('xmlsitemap_regenerate_needed', FALSE);
          $form_state['values']['xmlsitemap_regenerate_needed'] = TRUE;
        }
      }
      // Prevent system_settings_form_submit() from saving this form element as
      // a variable.
      unset($form_state['values'][$entity]);
    }
  }
}

/**
 * Implements hook_simplified_modules_hidden_submodules().
 */
function gardens_features_simplified_modules_hidden_submodules() {
  return array(
    'xmlsitemap_engines',
    'xmlsitemap_menu',
    'xmlsitemap_node',
    'xmlsitemap_taxonomy',
    'views_ui',
    'date_views',
    'date_popup',
    'pathauto_live_preview',
  );
}

/**
 * Implements hook_simplified_modules_hidden_dependencies().
 */
function gardens_features_simplified_modules_hidden_dependencies() {
  return array(
    'webform',
    'form_builder',
    'form_builder_webform',
    'options_element',
    'ux_elements',
    'ctools',
    'date_api',
    'votingapi',
  );
}

/**
 * Implements MODULE_preprocess_node().
 */
function gardens_features_preprocess_node(&$variables) {
  // Give each node type title its own class.
  $variables['title_attributes_array']['class'][] = $variables['type'] . '-header';

  // Hide the title on certain node types where it makes no sense.
  if (in_array($variables['type'], array('customer', 'testimonial'))) {
    $variables['title'] = '';
  }

  // Add a special label to FAQ items nodes when they are not displayed on
  // their own page.
  if ($variables['type'] == 'faq_item' && !$variables['page']) {
    $variables['icon'] = array(
      '#markup' => '<div class="faq-item-question-label">Q</div>',
    );
    $variables['title_attributes_array']['class'][] = 'faq-item-inline-question-title';
  }

  // Customer nodes should never get a "read more" link, even when in teaser
  // mode.
  if ($variables['type'] == 'customer') {
    unset($variables['content']['links']['node']['#links']['node-readmore']);
  }

  // Testimonial authors and affiliations should be rendered together.
  if ($variables['type'] == 'testimonial') {
    if (isset($variables['content']['field_testimonial_author'][0]['#markup'])) {
      $variables['content']['field_testimonial_author'][0]['#markup'] = '&ndash;' . $variables['content']['field_testimonial_author'][0]['#markup'];
    }
    if (isset($variables['content']['field_testimonial_affiliation'])) {
      $affiliation = drupal_render($variables['content']['field_testimonial_affiliation']);
      if (!empty($affiliation)) {
        $variables['content']['field_testimonial_author'][0]['#markup'] .= ', ' . $affiliation;
      }
    }
  }
}

/**
 * Preprocess function for theme_styles().
 */
function gardens_features_preprocess_styles(&$variables) {
  $instance = $variables['instance'];
  $container = $instance->variables['container']['name'];

  // Add an indicator icon to thumbnail images of video.
  if ($container == 'media_youtube' && isset($instance->image_style)) {
    $variables['output'] .= '<span class="gardens-features-video-indicator"></span>';
  }

  // Legacy compatibility with Styles 1.x.
  $instance->array_push('classes', 'styles-field-' . $variables['field_type']);
  $instance->array_push('classes', 'styles-style-' . $variables['style_name']);
  $instance->array_push('classes', 'styles-container-' . $container);
  $instance->set_wrapper_type('div');
  $variables['prefix'] = $instance->get_prefix();
  $variables['suffix'] = $instance->get_suffix();
}

function gardens_features_preprocess_block(&$vars) {
  // For the short term, we'll scope the menus in just the navigation region as dropdowns
  $region = $vars['block']->region;
  $allowedRegions = array('navigation');
  $hasSubmenu = false;
  if(in_array($region, $allowedRegions)) {
    $keys = element_children($vars['elements']);
    foreach($keys as $key) {
      $element = $vars['elements'][$key];
      if (isset($element['#original_link']) && $element['#original_link']['expanded'] && $element['#original_link']['has_children']) {
        $hasSubmenu = true;
      }
    }
    if ($hasSubmenu) {
      $path = drupal_get_path('module', 'gardens_features');
      drupal_add_js($path . '/js/superfish.js');
      drupal_add_js($path . '/js/hoverIntent.js');
      // Add custom CSS
      drupal_add_css($path . '/css/dropdown.css');
      $vars['classes_array'][] = 'menu-dropdown';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gardens_features_form_media_add_upload_alter(&$form, &$form_state, $form_id) {
  // If only certain media types are allowed, reduce the set of allowed
  // extensions accordingly. This logic is not part of the Media module,
  // because the Media module implements OR logic for mapping a file to a media
  // type, so it's theoretically possible for a file without one of the known
  // image extensions to still be an image. But we drop support for that edge
  // case in favor of improving the Upload UI.
  // @todo This can be abstracted to work generically for all media types, but
  //   is currently just focused on images, because that's the use-case for
  //   Gardens.
  if (isset($form['#validators']['media_file_validate_types'][0]) && isset($form['upload']['#upload_validators']['file_validate_extensions'][0])) {
    // @todo At this time, Gardens does not support uploaded video (only embeds
    //   from a provider site like YouTube), so even if the media browser
    //   context allows video (e.g., from the Gallery), we constrain the Upload
    //   tab to just images.
    if (array_values(array_diff($form['#validators']['media_file_validate_types'][0], array('video'))) === array('image')) {
      $image_type = media_type_load('image');
      $all_extensions = explode(' ', $form['upload']['#upload_validators']['file_validate_extensions'][0]);
      $image_extensions = array_intersect($all_extensions, $image_type->type_callback_args['extensions']);
      $form['upload']['#upload_validators']['file_validate_extensions'][0] = implode(' ', $image_extensions);
      // If the description already includes the contents of
      // theme_file_upload_help(), replace it with the reduced set of
      // extensions.
      // @todo Fix media_add_upload() to add the file upload help later in the
      //   pipeline (e.g., in a #process or #pre_render function), so that this
      //   code can be removed.
      if (!empty($all_extensions) && isset($form['upload']['#description'])) {
        $form['upload']['#description'] = str_replace(check_plain(implode(' ', $all_extensions)), check_plain(implode(' ', $image_extensions)), $form['upload']['#description']);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gardens_features_form_media_add_upload_multiple_alter(&$form, &$form_state, $form_id) {
  // We want the same alteration of the "upload" form regardless of whether
  // it's single or multi.
  gardens_features_form_media_add_upload_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_media_browser_plugins_alter.
 *
 * Used to rename the tabs in the media browser when in the browser.
 */
function gardens_features_media_browser_plugins_alter(&$plugins) {
  $current_params = media_get_browser_params();
  $plugins['upload']['#title'] = isset($current_params['multiselect']) ? t('Upload images') : t('Upload image');
  $plugins['media_internet']['#title'] = t('Embed from URL');
  if (isset($plugins['library'])) {
    $plugins['library']['#title'] = t('Browse library');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gardens_features_form_media_internet_add_alter(&$form, &$form_state) {
  if (module_exists('media_oembed') && variable_get('oembedembedly_api_key', FALSE)) {
    $path = drupal_get_path('module', 'gardens_misc');
    drupal_add_js($path . '/js/gardens_misc.providers.js');
    // Add a link to the providers supported by embedly.
    $link = l(t('See a list of providers'), 'admin/content/media/embed/providers', array('attributes' => array('class' => array('embed-providers-link'), 'target' => '_new')));
    $form['embed_code']['#title'] = t('URL');
    $form['embed_code']['#description'] = t('Paste the URL of the source you want to embed. !link.', array('!link' => $link));
  }
  elseif (isset($form['embed_code']['#description'])) {
    $form['embed_code']['#description'] = t('Paste the URL of an image or YouTube video, e.g., %url', array('%url' => 'http://www.youtube.com/watch?v=Duow7C29Rz4'));
  }

  // Hide the providers list.
  if (isset($form['providers'])) {
    $form['providers']['#access'] = FALSE;
  }
}

/**
 * Page callback to display embedly providers
 */
function gardens_features_embedly_providers() {
  $page = array();
  $path = drupal_get_path('module', 'gardens_misc');
  drupal_add_css($path . '/css/gardens_misc.providers.css');
  drupal_add_js($path . '/js/gardens_misc.providers.js');
  drupal_add_library('system', 'ui.dialog');
  
  // Grab the providers from the cache or from embed.ly if the cache is stale.
  $cache = cache_get('oembedly');
  $json = FALSE;
  if ($cache && isset($cache->data)) {
    $json = $cache->data;
  }
  else {
    $json = drupal_http_request('http://api.embed.ly/1/services');

    if ($json->code == 200) {
      $json = json_decode($json->data);
    }
    else {
      $json = FALSE;
    }

    cache_set('oembedly', $json, 'cache', REQUEST_TIME + 3600 * ($json ? 24 : 6));
  }

  $bcove = new stdClass;
  $bcove->favicon = 'http://www.brightcove.com/sites/default/files/favicon.ico';
  $bcove->displayname = 'Brightcove';
  $bcove->domain = 'brightcove.com';
  $bcove->type = 'video';
  $bcove->about = "Brightcove Inc, the cloud content services company, provides a family of products used to publish and distribute the world's professional digital media. The company's products include Brightcove Video Cloud, the market-leading online video platform, and Brightcove App Cloud, the pioneering content app platform. Together, more than 3,000 customers in 50 countries rely on Brightcove's cloud content services to build and operate exceptional media experiences across PCs, smartphones, tablets and connected TVs.";
  array_unshift($json, $bcove);

  $types = array(
    'all' => l('all', $_GET['q'], array('query' => array('filter' => 'all'))),
    'video' => FALSE,
    'audio' => FALSE,
    'photo' => FALSE,
    'product' => FALSE,
    'other' => FALSE,
  );
  
  $filter = isset($_GET['filter']) ? $_GET['filter'] : 'all';
  
  foreach($json as $provider) {
    $type = in_array($provider->type, array('video', 'photo', 'product', 'audio')) ? $provider->type : 'other';
    $types[$type] = l($type, $_GET['q'], array('query' => array('filter' => $type)));
    if ($filter == 'all' || $filter == $type) {
      $image = !empty($provider->favicon) ? theme('image', array('path' => $provider->favicon, 'width' => 16, 'height' => 16)) : '';
      $label = '<a href="#" class="provider-link">' . $image . ' ' . $provider->displayname . '</a>';
      $description = '<div class="provider-info">' . $provider->about . '<p>' .  l($provider->domain, 'http://' . $provider->domain, array('attributes' => array('target' => '_new'), 'external' => TRUE, 'absolute' => TRUE)) . '</p></div>';
      $items[] = array('data' => $label . $description, 'class' => array('embedly-provider', $type));
    }
  }
  
  array_unshift($types, t('Filter') . ': ');
  
  $page['links'] = array(
    '#markup' => theme('item_list', array('items' => array_values($types), 'attributes' => array('class' => array('filter-links')))),
  );

  $page['providers'] = array(
    '#markup' => theme('item_list', array('items' => $items, 'attributes' => array('class' => array('embedly-provider-list')))),
  );
  
  return $page;
}

function gardens_features_default_oembedcore_provider() {
  $provider = new stdClass;
  $provider->disabled = FALSE;
  $provider->name = 'oembedembedly_gardens_misc_brightcove';
  $provider->title = 'Drupal Gardens Embed.ly/Brightcove';
  $provider->endpoint = 'http://api.embed.ly/1/oembed';
  $provider->scheme = 'http://*.bcove.me/*
http://bcove.me/*
http://link.brightcove.com/*';

  return array(
    'gardens_misc_brightcove' => $provider,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gardens_features_form_views_ui_add_form_alter(&$form, $form_state) {
  // This is a temporary workaround to force all jump menus created from the
  // views wizard to use the "fields" row plugin, since that's the only one
  // that is expected to work correctly. We should remove this code once the
  // options are properly limited by Views itself.
  foreach (array('page', 'block') as $type) {
    if (isset($form['displays'][$type]['options']['style']['style_plugin']['#default_value'])) {
      $style_plugin = $form['displays'][$type]['options']['style']['style_plugin']['#default_value'];
      if ($style_plugin == 'jump_menu') {
        $form['displays'][$type]['options']['style']['row_plugin']['#access'] = FALSE;
        $form['displays'][$type]['options']['style']['row_plugin']['#default_value'] = 'fields';
        $form['displays'][$type]['options']['style']['row_plugin_trigger_update']['#access'] = FALSE;
        $form['displays'][$type]['options']['style']['row_options']['#access'] = FALSE;
        $form['displays'][$type]['options']['style']['row_plugin_description'] = array('#markup' => '<span>' . t('of fields') . '</span>');
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gardens_features_form_views_ui_edit_form_alter(&$form, $form_state) {
  // It's expected that many Gardens users will be able to accomplish what they
  // want via the contextual links in the Views preview, so hide the bulk of the
  // edit form until it's needed.
  if (isset($form['displays']['settings'])) {
    $form['displays']['settings']['#attributes']['class'][] = 'ctools-collapsed';
    $form['displays']['settings']['#attributes']['class'][] = 'ctools-collapsible-remember';
    // Add the word "Edit" to the title of the collapsed section, so it's
    // clear what will happen when they click on it.
    $display_title = views_ui_get_display_label($form_state['view'], $form_state['display_id'], FALSE);
    $form['displays']['settings']['tab_title']['#markup'] = '<h2 id="edit-display-settings-title" class="ctools-collapsible-handle">' . t('Edit @display_title details', array('@display_title' => $display_title)) . '</h2>';
  }
}

/**
 * Implements hook_views_ui_display_tab_alter().
 */
function gardens_features_views_ui_display_tab_alter(&$build) {
  // These options are probably not useful to Gardens users.
  foreach (array('display_comment', 'enabled', 'hide_attachment_summary') as $key) {
    if (isset($build['details']['columns']['third']['collapse']['other'][$key])) {
      $build['details']['columns']['third']['collapse']['other'][$key]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function gardens_features_wysiwyg_editor_settings_alter(&$settings, &$context) {
  // CKEditor 3.5 added an IFRAME plugin, but it converts width="100%" to
  // width="100". Until that's fixed, don't use the plugin.
  if ($context['editor']['name'] == 'ckeditor' && version_compare($context['editor']['installed version'], '3.5.0.6260', '>=')) {
    if (empty($settings['removePlugins'])) {
      $settings['removePlugins'] = 'iframe';
    }
    elseif (strpos($settings['removePlugins'], 'iframe') === FALSE) {
      $settings['removePlugins'] .= ',iframe';
    }
  }
}

/**
 * Implements hook_styles_default_styles().
 *
 * Pending resolution of http://drupal.org/node/1026790#comment-4258224,
 * http://drupal.org/node/1058056 and a robust Styles UI module, expose
 * administrator-defined image styles as File Styles.
 */
function gardens_features_styles_default_styles() {
  $styles = array();
  foreach (image_styles() as $style_name => $image_style) {
    if (!($image_style['storage'] & IMAGE_STORAGE_MODULE)) {
      $styles[$style_name] = array(
        'label' => $style_name,
        'description' => 'A custom image style.',
      );
    }
  }
  return array('file' => array('styles' => $styles));
}

/**
 * Implements hook_styles_default_presets_alter().
 *
 * @see gardens_features_styles_default_styles()
 */
function gardens_features_styles_default_presets_alter(&$styles) {
  $containers = array('image');
  if (module_exists('media_youtube')) {
    $containers[] = 'media_youtube';
  }
  $custom_image_styles = gardens_features_styles_default_styles();
  $custom_image_styles = $custom_image_styles['file']['styles'];
  foreach (array_keys($custom_image_styles) as $image_style) {
    foreach ($containers as $container) {
      $styles['file']['containers'][$container]['styles'][$image_style]['default preset'] = $image_style;
      $styles['file']['containers'][$container]['presets'][$image_style] = array(
        array(
          'name' => 'image_style',
          'settings' => array(
            'image_style' => $image_style,
          ),
        ),
        array(
          'name' => 'thumbnail',
          'settings' => array(),
        ),
      );
    }
  }
}

/**
 * Implements hook_image_style_save().
 *
 * gardens_features_styles_default_styles() exposes administrator defined image
 * styles as File Styles, and therefore, as File Field formatters. These must be
 * updated when the image style name is changed, or an image style is deleted.
 */
function gardens_features_image_style_save($style) {
  if (isset($style['old_name']) && $style['old_name'] != $style['name']) {
    $instances = array();
    $fields = field_read_fields(array('type' => 'file'), array('include_inactive' => TRUE));
    foreach ($fields as $field) {
      $instances = array_merge($instances, field_read_instances(array('field_id' => $field['id']), array('include_inactive' => TRUE)));
    }
    foreach ($instances as $instance) {
      $update_instance = FALSE;
      foreach ($instance['display'] as $view_mode => $display) {
        if ($display['type'] == 'styles_file_' . $style['old_name']) {
          $update_instance = TRUE;
          $instance['display'][$view_mode]['type'] = $style['name'] ? ('styles_file_' . $style['name']) : 'styles_file_original';
        }
      }
      if ($update_instance) {
        field_update_instance($instance);
      }
    }
  }
}

/**
 * Implements hook_image_style_delete().
 */
function gardens_features_image_style_delete($style) {
  gardens_features_image_style_save($style);
}

/**
 * Implements hook_image_style_flush().
 *
 * gardens_features_styles_default_styles() exposes administrator defined image
 * styles as File Styles, so all Styles module caches must be flushed when an
 * image style is flushed.
 */
function gardens_features_image_style_flush($style) {
  if (module_exists('styles')) {
    styles_style_flush();
  }
}

/**
 * Implements hook_form_FORM_ID_alter() in order to reduce the confusion on the
 * individual block admin pages.
 */
function gardens_features_form_block_admin_configure_alter(&$form, &$form_state) {
  gardens_features_block_region_simplify($form);
}

function gardens_features_form_block_add_block_form_alter(&$form, &$form_state) {
  gardens_features_block_region_simplify($form);
}

function gardens_features_block_region_simplify(&$form) {
  global $user;

  // Change the text on the fieldset
  $form['regions']['#title'] = t('Block location');
  $form['regions']['#description'] = t('Specify the location of this block by choosing a region.');

  $default_theme = variable_get('theme_default');
  $keys = element_children($form['regions']);
  foreach($keys as $key) {
    if ($key != $default_theme) {
      $form['regions'][$key]['#access'] = FALSE;
    } else {
      $form['regions'][$key]['#title'] = t('Region');
      if (!empty($user->theme)) {
        $form['regions'][$key]['#description'] = t('Changes will not be visible while ThemeBuilder is open');
      }
    }
  }
}

/**
 * Changes the help text for fivestar settings
 */
function gardens_features_block_view_alter(&$data, $block) {
  $path = menu_tab_root_path();
  if ($block->delta == 'help' && $path == 'admin/config/content/fivestar') {
    $data['content'] = t('Configure site-wide fivestar settings');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removes some text and the color options from the fivestar configuration form
 */
function gardens_features_form_fivestar_settings_alter(&$form, &$form_state) {
  // Remove the color selector
  unset($form['color']);

  // The "Custom color widgets" are not custom, they should be added to the main
  // listing of widgets.
  $form['widget']['#title'] = t('Fivestar display');
  unset($form['widget']['#description']);
  $form['widget']['fivestar_color_widget']['#access'] = FALSE;
  unset($form['widget']['fivestar_color_widget']['#options']);

  $form['tags']['#title'] = t('Voting categories');
  $form['tags']['#collapsible'] = TRUE;
  $form['tags']['#collapsed'] = TRUE;
  unset($form['tags']['#description']);

  $form['tags']['tags']['#title'] = t('Categories');
  $form['tags']['tags']['#description'] = t('Enter categories to be available for rating content. Separate multiple categories with commas. (e.g. Service, Price, Quality)');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gardens_features_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  // Reorganize the fivestar field edit form.
  if ($form['#field']['type'] == 'fivestar') {
    $form['instance']['settings']['target']['#description'] = t('Cast votes on another item.  For more information, <a href="http://drupal.org/handbook/modules/fivestar">view the Fivestar handbook</a>.');
    $form['instance']['widget']['settings']['feedback_enable']['#access'] = FALSE;
    $form['instance']['widget']['settings']['feedback_enable']['#default_value'] = TRUE;
  }

  // Limit the number of rows in the description field.
  $form['instance']['description']['#rows'] = 1;

  // Modify the layout and interaction of the "Display on user registration
  // form" and "Required field" checkboxes on user fields.
  if ($form['#instance']['entity_type'] == 'user') {
    // Switch the order of the checkboxes (put the required field checkbox
    // last).
    $weight = $form['instance']['settings']['user_register_form']['#weight'];
    $form['instance']['settings']['user_register_form']['#weight'] = $form['instance']['required']['#weight'];
    $form['instance']['required']['#weight'] = $weight;

    // Make the required field checkbox only visible when the user registration
    // checkbox is checked.
    $form['instance']['required']['#states']['visible']['input[name="instance[settings][user_register_form]"]']['checked'] = TRUE;

    // Indent the required field checkbox to add another visual cue about the
    // dependency (see garden_features.css).
    // @todo: Does this styling work for other themes besides Seven and
    //   Blossom?
    $form['instance']['required']['#attributes']['class'][] = 'gardens-features-checkbox-indent';

    // Hide the description on the user registration checkbox, since the
    // relation between the checkboxes is now made clear by the form layout and
    // behavior.
    $form['instance']['settings']['user_register_form']['#description'] = NULL;

    // Remove the JavaScript behaviors that were previously attached to the
    // user registration checkbox, since they are no longer relevant.
    unset($form['instance']['settings']['user_register_form']['#states']['enabled']['input[name="instance[required]"]']);
    unset($form['instance']['settings']['user_register_form']['#attached']['js'][0]);

    // Replace the user module's submit handler (which ensured that the user
    // registration checkbox was checked whenever the required field checkbox
    // was) with a submit handler of our own.
    $keys = array_keys($form['#submit'], 'user_form_field_ui_field_edit_form_submit');
    if (!empty($keys)) {
      $key = array_shift($keys);
      $form['#submit'][$key] = 'gardens_features_form_field_ui_field_edit_form_submit';
    }
  }
}

/**
 * Additional submit handler for the 'Edit field instance' form.
 *
 * This function ensures that if the user registration checkbox is unchecked,
 * the required field checkbox is too. It thus enforces the contrapositive of
 * the condition that user_form_field_ui_field_edit_form_submit() does, which
 * is the behavior we need given our changes to the UI.
 *
 * @see user_form_field_ui_field_edit_form_submit()
 */
function gardens_features_form_field_ui_field_edit_form_submit($form, &$form_state) {
  if (empty($form_state['values']['instance']['settings']['user_register_form'])) {
    form_set_value($form['instance']['required'], 0, $form_state);
  }
}

/**
 * Implements hook_file_view_file_alter().
 */
function gardens_features_file_view_file_alter(&$element, $display) {
  $element['#theme_wrappers'][] = 'gardens_features_styles_markup_compatibility';
}

/**
 * Returns HTML wrapping a file display as though it were rendered by the Styles module.
 */
function theme_gardens_features_styles_markup_compatibility($variables) {
  $element = $variables['element'];
  $display = $element['#display'];
  $output = '<div class="media-thumbnail-frame">' . $element['#children'];
  switch ($display['type']) {
    case 'file_image':
      $container = 'image';
      $style = $display['settings']['image_style'] ? $display['settings']['image_style'] : 'original';
      break;
    case 'media_youtube_image':
      $container = 'media_youtube';
      $style = $display['settings']['image_style'] ? $display['settings']['image_style'] : 'original';
      $output .= '<span class="gardens-features-video-indicator"></span>';
      break;
    case 'media_youtube_video':
      $container = 'media_youtube';
      $style = '';
      break;
  }
  if (isset($container) && isset($style) && variable_get('gardens_features_styles_markup_compatibility', FALSE)) {
    $output = '<div class="' . check_plain("styles file-styles $style styles-field-file styles-style-$style styles-container-$container") . '">' . $output . '</div>';
    $output = '<div class="field field-name-file field-type-file field-label-hidden"><div class="field-items"><div class="field-item even">' . $output . '</div></div></div>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_field_create_instance().
 */
function gardens_features_field_create_instance($instance) {
  // When a new field instance is created, it is given default display settings
  // for the 'default' view mode, either by the field_create_instance() caller,
  // or within the internal logic of _field_write_instance(). By default, the
  // field is hidden from all other view modes that use custom display settings,
  // until code or the administrator explicitly makes it visible. However, the
  // 'full' view mode for node entities is special: the administrator expects a
  // newly created field to have the same initial display settings for it as for
  // the default view mode, even when it is using custom settings for the other
  // fields. This implements that expectation.
  if ($instance['entity_type'] == 'node' && !isset($instance['display']['full'])) {
    // If the full view mode isn't configured to use custom display settings,
    // then it automatically inherits the default view mode's settings, and
    // there's no need to explicitly clone.
    $view_mode_settings = field_view_mode_settings('node', $instance['bundle']);
    if (!empty($view_mode_settings['full']['custom_settings'])) {
      $instance['display']['full'] = isset($instance['display']['default']) ? $instance['display']['default'] : array();
      field_update_instance($instance);
    }
  }
}

// == Block hooks for author information block migrated from profile module ====

/**
 * Implements hook_block_info().
 */
function gardens_features_block_info() {
  return array(
    'author-information' => array(
      'info' => t('Author information'),
      'cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE,
    ),
  );
}

/**
 * Implements hook_block_configure().
 */
function gardens_features_block_configure($delta = '') {
  if ($delta == 'author-information') {
    $fields = array(
      'user_profile' => t('Link to full user profile'),
      'picture' => t('User picture'),
    );
    $form['gardens_features_author_block_fields'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Profile information to display'),
      '#default_value' => array_keys(array_filter(variable_get('gardens_features_author_block_fields', array('picture' => TRUE, 'user_profile' => TRUE)))),
      '#options' => $fields,
    );
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function gardens_features_block_save($delta = '', $edit = array()) {
  if ($delta == 'author-information') {
    variable_set('gardens_features_author_block_fields', $edit['gardens_features_author_block_fields']);
  }
}

/**
 * Implements hook_block_view().
 */
function gardens_features_block_view($delta = '') {
  if (($delta == 'author-information') && user_access('access user profiles') && (arg(0) == 'node') && is_numeric(arg(1)) && (arg(2) == NULL)) {
    $output = '';
    $node = node_load(arg(1));
    $account = user_load($node->uid);
    $use_fields = variable_get('gardens_features_author_block_fields', array('picture' => TRUE, 'user_profile' => TRUE));
    if (!empty($use_fields['picture'])) {
      $output .= theme('user_picture', array('account' => $account));
    }
    if (!empty($use_fields['user_profile'])) {
      $output .= '<div>' . l(t('View full user profile'), 'user/' . $account->uid) . '</div>';
    }
    if ($output) {
      $block['subject'] = t('About %name', array('%name' => format_username($account)));
      $block['content'] = $output;
      return $block;
    }
  }
}

/**
 * Implements hook_file_default_displays().
 *
 * Provides default display configurations for media types.
 *
 * @see file_entity_schema()
 */
function gardens_features_file_default_displays() {
  $default_displays = array();
  $default_styles = array();

  if (module_exists('media_gallery') && module_exists('media_oembed')) {
    foreach(array('image', 'video') as $name) {
      $default_styles[$name . '__media_gallery_thumbnail__media_oembed_thumbnail_style'] = array('image_style' => 'media_gallery_thumbnail');
      $default_styles[$name . '__media_gallery_lightbox__media_oembed'] = array();
      $default_styles[$name . '__media_gallery_detail__media_oembed'] = array();
      $default_styles[$name . '__media_gallery_block_thumbnail__media_oembed_thumbnail_style'] = array('image_style' => 'media_gallery_thumbnail');
      $default_styles[$name . '__media_gallery_collection_thumbnail__media_oembed_thumbnail_style'] = array('image_style' => 'media_gallery_thumbnail');
    }
  }

  foreach ($default_styles as $display_name => $settings) {
    $default_displays[$display_name] = (object) array(
      'api_version' => 1,
      'name' => $display_name,
      'status' => 1,
      'weight' => 0,
      'settings' => $settings,
    );
  }

  return $default_displays;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function gardens_features_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );
  if (isset($api_versions[$owner][$api])) {
    return array('version' => $api_versions[$owner][$api]);
  }
}
